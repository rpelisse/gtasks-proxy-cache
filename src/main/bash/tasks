#!/bin/bash
set -euo pipefail

readonly GTASK_PROXY_URL='http://127.0.0.1:2333/tasks'
readonly RESULT_FILE='/tmp/tasks.output'

usage() {
  echo 'TODO'
}

encode_chars_for_url() {
  local string="${1}"

  echo "${string}" | sed -e 's; ;%20;g' -e 's;/;%2F;g'
}


call_gtasks_proxy() {
  local path=${1}
  local method=${2:-'GET'}
  local data=${3:-''}
  local content_type=${4:-'text/plain'}

  local url="${GTASK_PROXY_URL}/${path}"

  if [ -n "${data}" ]; then
    status=$(expr 0 + $(curl -s -w "%{http_code}\n" -X "${method}" -H "Content-Type: ${content_type}" -d "${data}" "${url}" -o "${RESULT_FILE}"))
  else
    status=$(expr 0 + $(curl -s -w "%{http_code}\n" -X "${method}" "${url}" -o "${RESULT_FILE}"))
  fi

  if [[ ${status} =~ ^2[0-9][0-9]$ ]] ; then
    cat "${RESULT_FILE}"
    echo ''
    exit 0
  else
    echo "Request failed with status:${status}."
    exit "${status}"
  fi
}

new_name=''
task_url='none'
task_to_perform='none'
NOTES=''
TASK_ID=''
while getopts VhlLrtda:i:n:ip:bos:S:D:T:u:R: OPT; do
  case "$OPT" in
    L)
        call_gtasks_proxy 'tag/list' | sed -e 's/{//g' -e 's/}//g' -e 's/,/\n/g' | sed -e 's/^ *//g'
        exit 0
        ;;
    l)
        call_gtasks_proxy 'list/today'
        ;;
    t)
        call_gtasks_proxy 'list/tomorrow'
		;;
    o)
        call_gtasks_proxy 'list/overdue'
        ;;
    r)
        call_gtasks_proxy 'refresh' 'POST'
        ;;
    i)
        TASK_ID="${OPTARG}"
        ;;
    d)
        task_to_perform='delete'
        ;;
    a)
        task_to_perform='add-task'
        readonly TASK_TITLE="${OPTARG}"
        ;;
    n)
        NOTES="${OPTARG}"
        ;;
    p)
        POSTPONE_TO="${OPTARG}"
        ;;
    b)
        task_to_perform='bump'
        ;;
    s)
        call_gtasks_proxy "search/title/$(encode_chars_for_url ${OPTARG})"
        ;;
    S)
        call_gtasks_proxy "search/notes/$(encode_chars_for_url ${OPTARG})"
        ;;
    D)
        call_gtasks_proxy "desc/$(encode_chars_for_url ${OPTARG})"
        echo ''
        ;;
    V)
        call_gtasks_proxy "version"
        echo ''
        exit 0
        ;;
    T)
        task_to_perform='tag'
        tag_id="${OPTARG}"
        if [ -z "${tag_id}" ]; then
          echo "Missing tag id! Aborting."
          exit 5
        fi
        ;;
    u)
        task_url=${OPTARG}
        ;;
    R)
        task_to_perform='rename'
        new_name=${OPTARG}
        ;;
    h)
        usage
        exit 0
        ;;
  esac
done

if [ "${task_url}" != 'none' ]; then
  call_gtasks_proxy "add/from/url" 'PUT' "${task_url}"
fi

readonly NOTES=${NOTES:-""}
if [ -n "${TASK_ID}" -a -n "${NOTES}" ] ; then
  call_gtasks_proxy "/notes/${TASK_ID}" 'POST' "${NOTES}"
fi

if [ "${task_to_perform}" = 'rename' ]; then
  call_gtasks_proxy "rename/${TASK_ID}" 'POST' "${new_name}"
fi

if [ "${task_to_perform}" = 'add-task' ]; then
    call_gtasks_proxy $(encode_chars_for_url "${TASK_TITLE}")/$(encode_chars_for_url "${NOTES}") 'PUT'
fi

# the next tasks requires to have a task id set
readonly TASK_ID=${TASK_ID:-""}
if [ -z "${TASK_ID}" ] ; then
  echo "This action requires to give a task Id."
  exit 1
fi

readonly POSTPONE_TO="${POSTPONE_TO:-1}"

if [ "${task_to_perform}" = 'bump' ]; then
  call_gtasks_proxy "bump/to/${TASK_ID}/${POSTPONE_TO}" 'POST'
fi

if [ "${task_to_perform}" = 'delete' ]; then
  call_gtasks_proxy "delete/${TASK_ID}" 'DELETE'
fi

if [ "${task_to_perform}" = 'tag' ]; then
  call_gtasks_proxy "tag/${TASK_ID}/${tag_id}" 'POST'
fi
